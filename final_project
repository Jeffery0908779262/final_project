import tkinter as tk
from tkinter import messagebox, filedialog
import os
import sqlite3

# Initialize SQLite database
def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT NOT NULL UNIQUE,
        password TEXT NOT NULL
    )
    """)
    conn.commit()
    conn.close()

# Register a new user
def register_user():
    def save_user():
        username = reg_username_entry.get()
        password = reg_password_entry.get()

        if not username or not password:
            messagebox.showerror("Error", "Username and password cannot be empty!")
            return

        try:
            conn = sqlite3.connect("users.db")
            cursor = conn.cursor()
            cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
            conn.commit()
            conn.close()
            messagebox.showinfo("Success", "Registration Successful!")
            reg_window.destroy()
        except sqlite3.IntegrityError:
            messagebox.showerror("Error", "Username already exists!")

    # Registration window
    reg_window = tk.Toplevel(login_window)
    reg_window.title("Register")
    reg_window.geometry("400x400")

    tk.Label(reg_window, text="Register New User", font=("Arial", 20)).pack(pady=20)

    tk.Label(reg_window, text="Username:", font=("Arial", 14)).pack(pady=5)
    reg_username_entry = tk.Entry(reg_window, font=("Arial", 14))
    reg_username_entry.pack(pady=5)

    tk.Label(reg_window, text="Password:", font=("Arial", 14)).pack(pady=5)
    reg_password_entry = tk.Entry(reg_window, font=("Arial", 14), show="*")
    reg_password_entry.pack(pady=5)

    tk.Button(reg_window, text="Register", font=("Arial", 14), command=save_user).pack(pady=20)

# Login function
def login():
    username = username_entry.get()
    password = password_entry.get()

    if not username or not password:
        messagebox.showerror("Error", "Username and password cannot be empty!")
        return

    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username = ? AND password = ?", (username, password))
    user = cursor.fetchone()
    conn.close()

    if user:
        messagebox.showinfo("Success", "Login Successful!")
        open_main_window()
    else:
        messagebox.showerror("Failure", "Incorrect username or password!")

# Open the main functionality window after successful login
def open_main_window():
    login_window.destroy()

    # Create the main window
    main_window = tk.Tk()
    main_window.title("Multimedia Management System")

    # Set the main window to full screen
    main_window.attributes('-fullscreen', True)

    # Add ESC key to exit fullscreen mode
    def exit_fullscreen(event):
        main_window.attributes('-fullscreen', False)

    main_window.bind("<Escape>", exit_fullscreen)

    def add_media():
        file_path = filedialog.askopenfilename(filetypes=[("PDF files", "*.pdf"), ("MP3 files", "*.mp3"), ("MP4 files", "*.mp4")])
        if file_path:
            media_files.append(file_path)
            messagebox.showinfo("Add Media", f"File added: {os.path.basename(file_path)}")

    def delete_media():
        def delete_selected():
            selected_files = [file for var, file in selected_checkboxes if var.get() == 1]

            if not selected_files:
                messagebox.showwarning("Warning", "No files selected!")
                return

            # Confirm before deletion
            confirm = messagebox.askyesno("Confirm", f"Are you sure you want to delete {len(selected_files)} file(s)?")
            if confirm:
                for file in selected_files:
                    media_files.remove(file)  # Remove the file from the list
                messagebox.showinfo("Delete Media", f"{len(selected_files)} file(s) deleted successfully!")
                delete_window.destroy()  # Close the delete window

        def cancel_select():
            for var, _ in selected_checkboxes:
                var.set(0)

        def return_to_main():
            delete_window.destroy()

        # Delete window setup
        delete_window = tk.Toplevel(main_window)
        delete_window.title("Delete Media")
        
        # Set a fixed window size to ensure buttons are visible
        delete_window.geometry("500x400")  # Adjust this size as needed

        selected_checkboxes = []

        if not media_files:
            messagebox.showwarning("No Files", "No files to delete!")
            return

        # Create a checkbox for each media file
        for i, file in enumerate(media_files):
            file_name = os.path.basename(file)  # Get the file name (without path)
            var = tk.IntVar()
            checkbox = tk.Checkbutton(delete_window, text=file_name, variable=var)
            checkbox.grid(row=i, column=0, sticky="w", padx=10, pady=5)
            selected_checkboxes.append((var, file))

        # Add buttons for delete, cancel, and return actions
        button_frame = tk.Frame(delete_window)  # Create a frame to hold the buttons
        button_frame.grid(row=len(media_files), column=0, pady=20)  # Position buttons after the checkboxes

        tk.Button(button_frame, text="Delete", font=("Arial", 12), command=delete_selected).grid(row=0, column=0, padx=10, pady=5)
        tk.Button(button_frame, text="Cancel", font=("Arial", 12), command=cancel_select).grid(row=0, column=1, padx=10, pady=5)
        tk.Button(button_frame, text="Return to Main", font=("Arial", 12), command=return_to_main).grid(row=0, column=2, padx=10, pady=5)

    def query_media():
        messagebox.showinfo("Query Media", "This is the Query Media feature")

    def play_media():
        messagebox.showinfo("Play Media", "This is the Play Media feature")

    def logout():
        # Close the main window and return to the login screen
        main_window.destroy()
        show_login_screen()

    tk.Label(main_window, text="Multimedia Management System", font=("Arial", 30)).pack(pady=20)

    tk.Button(main_window, text="Add Media", font=("Arial", 14), width=20, command=add_media).pack(pady=10)
    tk.Button(main_window, text="Delete Media", font=("Arial", 14), width=20, command=delete_media).pack(pady=10)
    tk.Button(main_window, text="Query Media", font=("Arial", 14), width=20, command=query_media).pack(pady=10)
    tk.Button(main_window, text="Play Media", font=("Arial", 14), width=20, command=play_media).pack(pady=10)

    # Change the button name to "Return to Login System"
    tk.Button(main_window, text="Return to Login System", font=("Arial", 14), width=20, command=logout).pack(pady=10)

    main_window.mainloop()

# Show login screen
def show_login_screen():
    global login_window
    login_window = tk.Tk()
    login_window.title("Member Management - Login")

    # Set the window to full screen
    login_window.attributes('-fullscreen', True)

    # Add ESC key to exit fullscreen mode
    def exit_fullscreen(event):
        login_window.attributes('-fullscreen', False)

    login_window.bind("<Escape>", exit_fullscreen)

    tk.Label(login_window, text="Member Management Login", font=("Arial", 30)).pack(pady=40)

    tk.Label(login_window, text="Username:", font=("Arial", 20)).pack(pady=10)
    global username_entry
    username_entry = tk.Entry(login_window, font=("Arial", 20))
    username_entry.pack(pady=10)

    tk.Label(login_window, text="Password:", font=("Arial", 20)).pack(pady=10)
    global password_entry
    password_entry = tk.Entry(login_window, font=("Arial", 20), show="*")
    password_entry.pack(pady=10)

    tk.Button(login_window, text="Login", font=("Arial", 18), command=login).pack(pady=20)
    tk.Button(login_window, text="Register", font=("Arial", 18), command=register_user).pack(pady=10)

    # Add 'Exit System' button to close the application
    tk.Button(login_window, text="Exit System", font=("Arial", 18), command=login_window.quit).pack(pady=20)

    login_window.mainloop()

# Initialize the database
init_db()

# List to store media files
media_files = []

# Start by showing the login screen
show_login_screen()
